--Task1
-- Q1. Create a table called EMP_TEST with a column NAME having leading and trailing spaces.
CREATE TABLE EMP_TEST (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100)
);
/
INSERT INTO EMP_TEST (NAME) VALUES ('   John Doe   ');
INSERT INTO EMP_TEST (NAME) VALUES ('   Alice   ');
INSERT INTO EMP_TEST (NAME) VALUES (' Bob ');
INSERT INTO EMP_TEST (NAME) VALUES ('***JANE*****');
/
-- Q2. Display all names using TRIM to remove both leading and trailing spaces.
SELECT TRIM(NAME) AS NAME 
FROM EMP_TEST;
/
-- Q3. Use LTRIM to remove only leading spaces.
SELECT LTRIM(NAME) AS NAME
FROM EMP_TEST;
/
-- Q4. Use RTRIM to remove only trailing spaces.
SELECT RTRIM(NAME) AS NAME
FROM EMP_TEST;
/
-- Q5. Use TRIM to remove a specific character (e.g., ‘*’ or ‘#’) from both sides of a string.
SELECT TRIM('*' FROM NAME) AS NAME 
FROM EMP_TEST;
------------------------------------------------------------------------------------------------------------------
--Task2
-- Q1. Use REPLACE to replace the letter 'a' with '@' in the word 'database'.
SELECT REPLACE('database', 'a', '@')
FROM dual;
/
-- Q2. Use REPLACE to replace a full word in a string (e.g., "old" with "new").
SELECT REPLACE('This is the old word.', 'old', 'new')
FROM DUAL;
/
-- Q3. Create a table PRODUCT with a product_name column, and insert 3 sample products.
CREATE TABLE PRODUCT (
    PRODUCT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PRODUCT_NAME  VARCHAR2(100)
);
/
INSERT INTO PRODUCT (PRODUCT_NAME) VALUES ('Laptop');
INSERT INTO PRODUCT (PRODUCT_NAME) VALUES ('Smartphone');
INSERT INTO PRODUCT (PRODUCT_NAME) VALUES ('Headphones');
/
-- Q4. Use LPAD to format product names to 15 characters by padding with '*' on the left.
SELECT LPAD(PRODUCT_NAME, 15, '*') AS PRODUCT_NAME
FROM PRODUCT;
/
-- Q5. Use RPAD to format product names to 15 characters by padding with '#' on the right.
SELECT RPAD(PRODUCT_NAME, 15, '#') AS PRODUCT_NAME
FROM PRODUCT;
------------------------------------------------------------------------------------------------------------------
--Task3
-- Q1. Display current date in the format 'DD-MON-YYYY'.
SELECT TO_CHAR(SYSDATE, 'DD-MON-YYYY') AS CURRENT_DATE
FROM DUAL;
/
-- Q2. Display current date in the format 'Month YYYY'.
SELECT TO_CHAR(SYSDATE, 'Month YYYY') AS CURRENT_DATE
FROM DUAL;
/
-- Q3. Convert a number to character using TO_CHAR with formatting (e.g., 12345.67 as '12,345.67').
SELECT TO_CHAR(12345.67, 'FM999,999.99') AS NUM
FROM DUAL;
/
-- Q4. Show salary formatted with a currency symbol.
SELECT TO_CHAR(SALARY, 'FM$999,999.99')
FROM EMPLOYEES;
------------------------------------------------------------------------------------------------------------------
--Task4
-- Q1. Create a table STUDENTS with columns: name, marks.
CREATE TABLE STUDENTS (
    ID    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME  VARCHAR2(100) ,
    MARKS NUMBER
);
/
-- Q2. Insert 5 sample students with marks.
INSERT INTO STUDENTS (name, marks) VALUES ('Alice', 85);
INSERT INTO STUDENTS (name, marks) VALUES ('Bob', 92);
INSERT INTO STUDENTS (name, marks) VALUES ('Charlie', 78);
INSERT INTO STUDENTS (name, marks) VALUES ('David', 60);
INSERT INTO STUDENTS (name, marks) VALUES ('Eva', 90);
/
-- Q3. Use CASE to assign grades: 
--     >=90 => 'A', 80–89 => 'B', 70–79 => 'C', else => 'F'
SELECT NAME, MARKS,
       CASE
           WHEN MARKS >= 90 THEN 'A'
           WHEN MARKS BETWEEN 80 AND 89 THEN 'B'
           WHEN MARKS BETWEEN 70 AND 79 THEN 'C'
           ELSE 'F'
       END AS GRADE
FROM STUDENTS;
------------------------------------------------------------------------------------------------------------------
--Task5
-- Q1. Use DECODE to achieve the same result as the CASE example above.
SELECT NAME, MARKS,
       DECODE(
           SIGN(MARKS - 90), 1, 'A', 0, 'A',
           DECODE(
               SIGN(MARKS - 80), 1, 'B', 0, 'B',
               DECODE(
                   SIGN(MARKS - 70), 1, 'C', 0, 'C',
                   'F'
               )
           )
       ) AS GRADE
FROM STUDENTS;
/
-- Q2. Create a table ORDERS with a column status ('P', 'S', 'D').
CREATE TABLE ORDERS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    STATUS CHAR(1)
);
/
INSERT INTO ORDERS (STATUS) VALUES ('P');
INSERT INTO ORDERS (STATUS) VALUES ('S');
INSERT INTO ORDERS (STATUS) VALUES ('D');
INSERT INTO ORDERS (STATUS) VALUES ('S');
INSERT INTO ORDERS (STATUS) VALUES ('P');
/
-- Q3. Use DECODE to display full form of status:
--     'P' => 'Pending', 'S' => 'Shipped', 'D' => 'Delivered'
SELECT ID,
       STATUS,
       DECODE(STATUS,
              'P', 'Pending',
              'S', 'Shipped',
              'D', 'Delivered',
              'Unknown') AS FULL_STATUS
FROM ORDERS;
------------------------------------------------------------------------------------------------------------------
--Task6
--Same as Task5
------------------------------------------------------------------------------------------------------------------
--Task7
--1. Character Functions – Part 3 (TRIM, LTRIM, RTRIM)
--Create a table customers with a full_name column. Insert names with extra spaces at the beginning and/or end.
CREATE TABLE CUSTOMERS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FULL_NAME VARCHAR(100)
);
/
INSERT INTO CUSTOMERS (FULL_NAME) VALUES ('  Alice Johnson  ');
INSERT INTO CUSTOMERS (FULL_NAME) VALUES ('  Bob Smith');
INSERT INTO CUSTOMERS (FULL_NAME) VALUES ('Carolyn   Davis ');
INSERT INTO CUSTOMERS (FULL_NAME) VALUES ('   David Lee');
INSERT INTO CUSTOMERS (FULL_NAME) VALUES ('####Evelyn Carter####');
/
--Write a query to remove both leading and trailing spaces from the names using TRIM.
SELECT TRIM(FULL_NAME) AS FULL_NAME
FROM CUSTOMERS;
/
--Display only the names with leading spaces removed using LTRIM.
SELECT LTRIM(FULL_NAME) AS FULL_NAME
FROM CUSTOMERS
/
--Display only the names with trailing spaces removed using RTRIM.
SELECT RTRIM(FULL_NAME) AS FULL_NAME
FROM CUSTOMERS
/
--Trim specific characters (e.g., $, *, or #) from both sides of a given string.
SELECT TRIM ('#' FROM FULL_NAME)
FROM CUSTOMERS;
---------------------------------------------------------------------------------------------------------------
--2. Character Functions – Part 4 (REPLACE, LPAD, RPAD)
--Replace all occurrences of the letter 'o' with '0' in the word “promotion”.
SELECT REPLACE('promotion','o','0') AS MODIFIED_WORD
FROM DUAL;
/
--Replace the word “basic” with “advanced” in the sentence “This is a basic course”.
SELECT REPLACE('This is a basic course', 'basic', 'advanced') AS MODIFIED_SENTENCE 
FROM dual;
/
--Create a departments table with dept_name column. Insert at least 3 department names.
CREATE TABLE DEPARTMENTS2 (
    DEPT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DEPT_NAME VARCHAR2(50)
);
/
INSERT INTO DEPARTMENTS2 (DEPT_NAME) VALUES ('HR');
INSERT INTO DEPARTMENTS2 (DEPT_NAME) VALUES ('IT');
INSERT INTO DEPARTMENTS2 (DEPT_NAME) VALUES ('Finance');
/
--Format each department name to 15 characters by padding with ‘*’ on the left using LPAD.
SELECT DEPT_ID, LPAD(DEPT_NAME, 15, '*') AS DEPT_NAME
FROM DEPARTMENTS2;
/

--Format each department name to 15 characters by padding with ‘-’ on the right using RPAD.
SELECT DEPT_ID, RPAD(DEPT_NAME, 15, '-') AS DEPT_NAME
FROM DEPARTMENTS2;
---------------------------------------------------------------------------------------------------------------
--3. TO_CHAR Function
--Display the current date in the format DD-MON-YYYY.
SELECT TO_CHAR(SYSDATE, 'DD-MON-YYYY') AS CURRENT_DATE 
FROM dual;
/
--Display the current date in the format Day, Month YYYY.
SELECT TO_CHAR(SYSDATE, 'Day, Month YYYY') AS CURRENT_DATE 
FROM dual;
/
--Convert a number to a formatted string with commas and two decimal places using TO_CHAR.
SELECT TO_CHAR(1234567.89, '999,999,999.00') AS FORMATTED_NUMBER
FROM DUAL;
/
--Format an employee’s salary to include a currency symbol using TO_CHAR.
SELECT TO_CHAR(SALARY, 'FM$999,999.99')
FROM EMPLOYEES;
/
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS CURRENT_DATE 
FROM DUAL;
---------------------------------------------------------------------------------------------------------------
--4. Oracle Conditional Expressions – CASE Expressions
--Create a students table with name and score columns. Insert at least 5 records.
CREATE TABLE STUDENTS2 (
    STUDENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100),
    SCORE NUMBER
);
/
INSERT INTO STUDENTS2 (NAME, SCORE) VALUES ('Alice', 95.5);
INSERT INTO STUDENTS2 (NAME, SCORE) VALUES ('Bob', 50);
INSERT INTO STUDENTS2 (NAME, SCORE) VALUES ('Charlie', 78.5);
INSERT INTO STUDENTS2 (NAME, SCORE) VALUES ('David', 92.0);
INSERT INTO STUDENTS2 (NAME, SCORE) VALUES ('Eva', 88.3);
/
--Write a query using CASE to assign grades based on the score
SELECT NAME, SCORE,
       CASE
           WHEN SCORE >= 90 THEN 'A'
           WHEN SCORE BETWEEN 80 AND 89 THEN 'B'
           WHEN SCORE BETWEEN 70 AND 79 THEN 'C'
           ELSE 'F'
       END AS GRADE
FROM STUDENTS2;
/
--Modify the query to display “Pass” if score is 60 or more, otherwise “Fail”.
SELECT NAME, SCORE,
       CASE
           WHEN SCORE >= 60 THEN 'Pass'
           ELSE 'Fail'
       END AS RESULT
FROM STUDENTS2;
/
--Use CASE to display a message for each student:
--"Excellent" for A, "Good" for B, "Average" for C, and "Needs Improvement" for F.
SELECT NAME, SCORE,
       CASE
           WHEN SCORE >= 90 THEN 'Excellent'
           WHEN SCORE BETWEEN 80 AND 89 THEN 'Good'
           WHEN SCORE BETWEEN 70 AND 79 THEN 'Average'
           ELSE 'Needs Improvement'
       END AS performance_message
FROM STUDENTS2;
/
--Write a CASE expression using system date to return the name of the day (e.g., “Today is Monday”).
SELECT CASE
           WHEN TO_CHAR(SYSDATE, 'FMDay') = 'Monday' THEN 'Today is Monday'
           WHEN TO_CHAR(SYSDATE, 'FMDay') = 'Tuesday' THEN 'Today is Tuesday'
           WHEN TO_CHAR(SYSDATE, 'FMDay') = 'Wednesday' THEN 'Today is Wednesday'
           WHEN TO_CHAR(SYSDATE, 'FMDay') = 'Thursday' THEN 'Today is Thursday'
           WHEN TO_CHAR(SYSDATE, 'FMDay') = 'Friday' THEN 'Today is Friday'
           WHEN TO_CHAR(SYSDATE, 'FMDay') = 'Saturday' THEN 'Today is Saturday'
           ELSE 'Today is Sunday'
       END AS CURRENT_DAY
FROM DUAL;
/
---------------------------------------------------------------------------------------------------------------
--5. Oracle Conditional Expressions – DECODE Function
--Use DECODE to return grade letters ('A', 'B', 'C', 'F') based on specific score values (e.g., 100 = A, 90 = B, etc.).
SELECT NAME, SCORE,
       DECODE(
           SIGN(SCORE - 90), 1, 'A', 0, 'A',
           DECODE(
               SIGN(SCORE - 80), 1, 'B', 0, 'B',
               DECODE(
                   SIGN(SCORE - 70), 1, 'C', 0, 'C',
                   'F'
               )
           )
       ) AS GRADE
FROM STUDENTS2;
/
--Create a status_log table with a status_code column containing values like ‘N’, ‘I’, ‘C’.
CREATE TABLE STATUS_LOG (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    STATUS_CODE CHAR(1)
);
/
INSERT INTO STATUS_LOG (STATUS_CODE) VALUES ('N');  
INSERT INTO STATUS_LOG (STATUS_CODE) VALUES ('I'); 
INSERT INTO STATUS_LOG (STATUS_CODE) VALUES ('C');  
INSERT INTO STATUS_LOG (STATUS_CODE) VALUES ('I');
INSERT INTO STATUS_LOG (STATUS_CODE) VALUES ('N');
/
--Use DECODE to convert:‘N’ ? ‘New’     ‘I’ ? ‘In Progress’     ‘C’ ? ‘Completed’
SELECT LOG_ID,
       STATUS_CODE,
       DECODE(STATUS_CODE,
              'N', 'New',
              'I', 'In Progress',
              'C', 'Completed',
              'Unknown') AS STATUS
FROM STATUS_LOG;
/
--Use DECODE to check if a product’s quantity is 0, and display “Out of Stock”, otherwise “Available”.
CREATE TABLE PRODUCTS (
    PRODUCT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(100),
    QUANTITY NUMBER DEFAULT 0
);
/
INSERT INTO PRODUCTS (PRODUCT_NAME, QUANTITY) VALUES ('Keyboard', 10);
INSERT INTO PRODUCTS (PRODUCT_NAME, QUANTITY) VALUES ('Mouse', 0);
INSERT INTO PRODUCTS (PRODUCT_NAME, QUANTITY) VALUES ('Monitor', 3);
INSERT INTO PRODUCTS (PRODUCT_NAME, QUANTITY) VALUES ('Webcam', 0);
INSERT INTO PRODUCTS (PRODUCT_NAME, QUANTITY) VALUES ('Laptop Stand', 15);
/
SELECT PRODUCT_ID,
       PRODUCT_NAME,
       QUANTITY,
       DECODE(QUANTITY, 
              0, 'Out of Stock', 
              'Available') AS STOCK_STATUS
FROM PRODUCTS;
/
--Write a query using DECODE to display a bonus:
--If department is ‘HR’ ? 500
--If department is ‘IT’ ? 1000
--If department is ‘Sales’ ? 1500
--Else ? 300
SELECT EMPLOYEE_ID,
       FIRST_NAME,
       LAST_NAME,
       (SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID = EMP.DEPARTMENT_ID) DEPARTMENT_NAME,
       DECODE((SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID = EMP.DEPARTMENT_ID),
              'HR', 500,
              'IT', 1000,
              'Sales', 1500,
              300) AS BONUS
FROM EMPLOYEES EMP;